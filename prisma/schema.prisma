generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String?
  password     String
  role         UserRole       @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PostActivity PostActivity[]
  FinalReport  FinalReport[]
  Company      Company?       @relation(fields: [companyId], references: [id])
  companyId    String?
  Review       Review[]
}

enum UserRole {
  ADMIN
  USER
}

model Company {
  id           String         @id @default(cuid())
  name         String
  description  String?
  images       CompanyImage[]
  locationId   String
  location     Location       @relation(fields: [locationId], references: [id])
  postActivity PostActivity[]
  requirements String
  benefits     String
  finalReports FinalReport[]
  roles        RoleIntern[]
  students     User[]
  reviews      Review[]
  typeIntern   TypeIntern
  typeActivity TypeActivity
  paid         Boolean
  registrants  Int            @default(0)
  accepted     Int            @default(0)
  reatedAt     DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model CompanyImage {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Location {
  id        String    @id @default(cuid())
  latitude  Float
  longitude Float
  cityId    String
  city      City      @relation(fields: [cityId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Company   Company[]
}

model PostActivity {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FinalReport {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoleIntern {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TypeIntern {
  MSIB
  REGULAR
}

enum TypeActivity {
  ONSITE
  REMOTE
  HYBRID
}

model City {
  id        String     @id @default(cuid())
  name      String
  stateId   String
  state     State      @relation(fields: [stateId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Location  Location[]
}

model State {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  City      City[]
}
